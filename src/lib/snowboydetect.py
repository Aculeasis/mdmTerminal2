# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import builtins as __builtin__
import os

_snowboydetect = None
SnowboyDetect_swigregister = None


def _load_module(main_path):
    import importlib.util

    name = '_snowboydetect.so'

    def load(target_):
        spec = importlib.util.spec_from_file_location('_snowboydetect', target_)
        foo = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(foo)
        return foo

    target = os.path.join(main_path, name)
    if not os.path.isfile(target):
        # legacy
        old_target = os.path.join(os.path.dirname(os.path.abspath(__file__)), name)
        target = old_target if os.path.isfile(old_target) else target
    try:
        return load(target)
    except ImportError as err:
        for binary in ('armv7',):
            try:
                return load(os.path.join(main_path, binary, name))
            except ImportError:
                pass
        raise ImportError(err)


def _init(main_path):
    global _snowboydetect
    if _snowboydetect:
        return
    global SnowboyDetect_swigregister, _load_module
    _snowboydetect = _load_module(main_path)
    del _load_module
    SnowboyDetect.__swig_destroy__ = _snowboydetect.delete_SnowboyDetect
    SnowboyDetect_swigregister = _snowboydetect.SnowboyDetect_swigregister
    SnowboyDetect_swigregister(SnowboyDetect)


try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


class SnowboyDetect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnowboyDetect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnowboyDetect, name)
    __repr__ = _swig_repr

    def __init__(self,
                 home: str, hot_word_files: list, sensitivity: float, audio_gain: float, apply_frontend: bool
                 ):
        _init(home)
        resource_filename = os.path.join(home, 'common.res').encode()
        this = _snowboydetect.new_SnowboyDetect(resource_filename, ','.join(hot_word_files).encode())
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.SetAudioGain(audio_gain)
        self.SetSensitivity(','.join([str(sensitivity)] * self.NumHotwords()).encode())
        self.ApplyFrontend(apply_frontend)

    def Reset(self):
        return _snowboydetect.SnowboyDetect_Reset(self)

    def RunDetection(self, *args):
        return _snowboydetect.SnowboyDetect_RunDetection(self, *args)

    def SetSensitivity(self, sensitivity_str):
        return _snowboydetect.SnowboyDetect_SetSensitivity(self, sensitivity_str)

    def GetSensitivity(self):
        return _snowboydetect.SnowboyDetect_GetSensitivity(self)

    def SetAudioGain(self, audio_gain):
        return _snowboydetect.SnowboyDetect_SetAudioGain(self, audio_gain)

    def UpdateModel(self):
        return _snowboydetect.SnowboyDetect_UpdateModel(self)

    def NumHotwords(self):
        return _snowboydetect.SnowboyDetect_NumHotwords(self)

    def ApplyFrontend(self, apply_frontend):
        return _snowboydetect.SnowboyDetect_ApplyFrontend(self, apply_frontend)

    def SampleRate(self):
        return _snowboydetect.SnowboyDetect_SampleRate(self)

    def NumChannels(self):
        return _snowboydetect.SnowboyDetect_NumChannels(self)

    def BitsPerSample(self):
        return _snowboydetect.SnowboyDetect_BitsPerSample(self)
    __del__ = lambda self: None

# This file is compatible with both classic and new-style classes.


